import { Circle, PlayDisabled } from "@mui/icons-material";
import Head from "next/head";

export const getStaticPaths = async () => {
  const res = await fetch(`http://localhost:3001/equipos`);
  const data = await res.json();

  const paths = data.data.map((team) => {
    return {
      params: { team: team.name.toString() },
    };
  });

  return {
    paths,
    fallback: false,
  };
};

export const getStaticProps = async (context) => {
  const name = context.params.team;
  const res = await fetch(`http://localhost:3001/equipos/${name}/historial`);
  const data = await res.json();

  const response = await fetch("http://localhost:3001/equipos");
  const allTeams = await response.json();

  return {
    props: { teamMatches: data, allTeamData: allTeams, name: name },
  };
};

export const Details = ({ teamMatches, allTeamData, name }) => {
  const getLogo = (teamName) => {
    let teamLogo = allTeamData.data.filter(
      (teamData) => teamData.name === teamName
    );
    return teamLogo[0].logo;
  };
  const teamSelected = allTeamData.data.filter((team) => team.name === name);

  const teamMatchesClone = [...teamMatches.data];
  let wins = 0;
  let losses = 0;
  let ties = 0;
  let goalsScored = 0;
  let goalsReceived = 0;
  let tournamentsPlayed = 0;
  let tournamentSelectedB = "";
  let finalsPlayed = teamMatches.data.filter(
    (match) => match.round === "Final"
  );
  let tournamentsWon = 0;

  return (
    <>
      <Head>
        <title>{teamSelected[0].name}: Torneos de La Banda del Lobo</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href={teamSelected[0].logo} />
      </Head>
      <img src={teamSelected[0].logo} width="169rem" height="169rem" />
      <h1>{teamSelected[0].name}</h1>
      <div className="streak-bubble">
        {teamMatchesClone.map((match) => {
          if (
            match.homeScore > match.awayScore &&
            teamSelected[0].name === match.home
          ) {
            return (
              <div
                style={{
                  display: "flex",
                  justifyContent: "center",
                  alignItems: "center",
                }}
              >
                <Circle className="winning-circle" />
                <p style={{ position: "absolute" }}>G</p>
              </div>
            );
          } else if (
            match.homeScore < match.awayScore &&
            teamSelected[0].name === match.away
          ) {
            return (
              <div
                style={{
                  display: "flex",
                  justifyContent: "center",
                  alignItems: "center",
                }}
              >
                <Circle className="winning-circle" />
                <p style={{ position: "absolute" }}>G</p>
              </div>
            );
          }
          if (
            match.homeScore > match.awayScore &&
            teamSelected[0].name === match.home
          ) {
            return (
              <div
                style={{
                  display: "flex",
                  justifyContent: "center",
                  alignItems: "center",
                }}
              >
                <Circle className="winning-circle" />
                <p style={{ position: "absolute" }}>G</p>
              </div>
            );
          } else if (
            match.homeScore < match.awayScore &&
            teamSelected[0].name === match.away
          ) {
            return (
              <div
                style={{
                  display: "flex",
                  justifyContent: "center",
                  alignItems: "center",
                }}
              >
                <Circle className="winning-circle" />
                <p style={{ position: "absolute" }}>G</p>
              </div>
            );
          } else if (match.homeScore === match.awayScore) {
            return (
              <div
                style={{
                  display: "flex",
                  justifyContent: "center",
                  alignItems: "center",
                }}
              >
                <Circle className="tie-circle" />
                <p style={{ position: "absolute" }}>E</p>
              </div>
            );
          } else {
            return (
              <div
                style={{
                  display: "flex",
                  justifyContent: "center",
                  alignItems: "center",
                }}
              >
                <Circle className="losing-circle" />
                <p style={{ position: "absolute" }}>P</p>
              </div>
            );
          }
        })}
      </div>
      <div>
        <h4>Historial</h4>
        <div className="history-record">
          {teamMatches.data.map((match) => {
            if (
              teamSelected[0].name === match.home &&
              match.homeScore > match.awayScore
            ) {
              wins++;
            } else if (
              teamSelected[0].name === match.away &&
              match.homeScore < match.awayScore
            ) {
              wins++;
            } else if (match.awayScore === match.homeScore) {
              ties++;
            } else {
              losses++;
            }
          })}
          <p>{wins}-</p>
          <p>{ties}-</p>
          <p>{losses}</p>
        </div>
      </div>
      <div>
        <h2>Estad√≠sticas</h2>
        <div>
          <p>Partidos jugados: {teamMatches.data.length}</p>
          <p>Partidos ganados: {wins}</p>
          <p>Partidos empatados: {ties}</p>
          <p>Partidos perdidos: {losses}</p>
          <p>
            Goles anotados:{" "}
            {teamMatches.data.map((match) => {
              if (teamSelected[0].name === match.home) {
                goalsScored += match.homeScore;
              } else if (teamSelected[0].name === match.away) {
                goalsScored += match.awayScore;
              }
            })}
            {goalsScored}
          </p>
          <p>
            Goles recibidos:{" "}
            {teamMatches.data.map((match) => {
              if (teamSelected[0].name !== match.home) {
                goalsReceived += match.homeScore;
              } else if (teamSelected[0].name !== match.away) {
                goalsReceived += match.awayScore;
              }
            })}
            {goalsReceived}
          </p>
          <p>
            Promedio gol a favor por partido:{" "}
            {(goalsScored / teamMatches.data.length).toFixed(2)}
          </p>
          <p>
            Promedio gol en contra por partido:{" "}
            {(goalsReceived / teamMatches.data.length).toFixed(2)}
          </p>
          <p>
            Torneos jugados:{" "}
            {teamMatches.data.map((match) => {
              let tournamentSelected = match.tournament;
              if (tournamentSelected === tournamentSelectedB) {
              } else {
                tournamentsPlayed++;
                tournamentSelectedB = tournamentSelected;
              }
            })}
            {tournamentsPlayed}
          </p>
          <p>
            Torneos ganados:{" "}
            {finalsPlayed.length === 0
              ? (tournamentsWon = 0)
              : finalsPlayed.map((match) => {
                  if (
                    teamSelected[0].name === match.home &&
                    match.homeScore > match.awayScore
                  ) {
                    tournamentsWon++;
                  } else if (
                    teamSelected[0].name === match.away &&
                    match.homeScore < match.awayScore
                  ) {
                    tournamentsWon++;
                  } else {
                    tournamentsWon;
                  }
                  return tournamentsWon;
                })}
          </p>
        </div>
      </div>
      <div className="matches-container">
        {teamMatches.data.map((el) => (
          <div key={el._id} className="match-container">
            <div className="match-tournament-info">
              <p>{el.tournament}</p>
              <p>{el.round}</p>
            </div>
            <div>
              <div className="team-score">
                <div className="team-data">
                  <img
                    alt={`Escudo ${el.home}`}
                    src={getLogo(el.home)}
                    width="30rem"
                    height="30rem"
                  />
                  <p>{el.home}</p>
                </div>
                <p>{el.homeScore}</p>
              </div>
              <div className="team-score">
                <div className="team-data">
                  <img
                    alt={`Escudo ${el.away}`}
                    src={getLogo(el.away)}
                    width="30rem"
                    height="30rem"
                  />
                  <p>{el.away}</p>
                </div>
                <p>{el.awayScore}</p>
              </div>
            </div>
            <div className="match-video">
              {el.video === null ? (
                <PlayDisabled />
              ) : (
                <iframe
                  width="140rem"
                  height="100rem"
                  src={el.video}
                  title={`${el.home} vs ${el.away}`}
                  frameBorder="0"
                  allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
                  allowFullScreen
                ></iframe>
              )}
            </div>
          </div>
        ))}
      </div>
    </>
  );
};

export default Details;
