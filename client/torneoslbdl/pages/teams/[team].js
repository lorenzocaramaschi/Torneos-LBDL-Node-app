import {
  ArrowLeft,
  Circle,
  FilterAltOutlined,
  PlayDisabled,
} from "@mui/icons-material";
import { Divider } from "@mui/material";
import Head from "next/head";

export const getStaticPaths = async () => {
  const res = await fetch(`http://localhost:3001/equipos`);
  const data = await res.json();

  const paths = data.data.map((team) => {
    return {
      params: { team: team.name.toString() },
    };
  });

  return {
    paths,
    fallback: false,
  };
};

export const getStaticProps = async (context) => {
  const name = context.params.team;
  const res = await fetch(`http://localhost:3001/equipos/${name}/historial`);
  const data = await res.json();

  const response = await fetch("http://localhost:3001/equipos");
  const allTeams = await response.json();

  const response2 = await fetch("http://localhost:3001/torneos");
  const allTournaments = await response2.json();

  return {
    props: {
      teamMatches: data,
      allTeamData: allTeams,
      name: name,
      tournaments: allTournaments,
    },
  };
};

export const Details = ({ teamMatches, allTeamData, name, tournaments }) => {
  const getLogo = (teamName) => {
    let teamLogo = allTeamData.data.filter(
      (teamData) => teamData.name === teamName
    );

    return teamLogo[0].logo;
  };

  const getTournamentLogo = (tournamentName) => {
    let tournamentLogo = tournaments.data.filter(
      (tournamentData) => tournamentData.name === tournamentName
    );

    return tournamentLogo[0].logo;
  };

  const resetHistoryParams = () => {
    winsVsRival = 0;
    lossesVsRival = 0;
    tiesVsRival = 0;
  };

  const teamSelected = allTeamData.data.filter((team) => team.name === name);

  const teamMatchesClone = [...teamMatches.data];
  let wins = 0;
  let losses = 0;
  let ties = 0;
  let goalsScored = 0;
  let goalsReceived = 0;
  let tournamentsPlayed = 0;
  let tournamentSelectedB = "";
  let finalsPlayed = teamMatches.data.filter(
    (match) => match.round === "Final"
  );
  let tournamentsWon = 0;
  let winsVsRival = 0;
  let lossesVsRival = 0;
  let tiesVsRival = 0;

  return (
    <>
      <Head>
        <title>{teamSelected[0].name}: Torneos de La Banda del Lobo</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href={teamSelected[0].logo} />
      </Head>
      <img src={teamSelected[0].logo} width="169rem" height="169rem" />
      <h1>{teamSelected[0].name}</h1>
      <div className="streak-bubble">
        {teamMatchesClone.map((match) => {
          if (
            match.homeScore > match.awayScore &&
            teamSelected[0].name === match.home
          ) {
            return (
              <div
                style={{
                  display: "flex",
                  justifyContent: "center",
                  alignItems: "center",
                }}
              >
                <Circle className="winning-circle" />
                <p style={{ position: "absolute" }}>G</p>
              </div>
            );
          } else if (
            match.homeScore < match.awayScore &&
            teamSelected[0].name === match.away
          ) {
            return (
              <div
                style={{
                  display: "flex",
                  justifyContent: "center",
                  alignItems: "center",
                }}
              >
                <Circle className="winning-circle" />
                <p style={{ position: "absolute" }}>G</p>
              </div>
            );
          }
          if (
            match.homeScore > match.awayScore &&
            teamSelected[0].name === match.home
          ) {
            return (
              <div
                style={{
                  display: "flex",
                  justifyContent: "center",
                  alignItems: "center",
                }}
              >
                <Circle className="winning-circle" />
                <p style={{ position: "absolute" }}>G</p>
              </div>
            );
          } else if (
            match.homeScore < match.awayScore &&
            teamSelected[0].name === match.away
          ) {
            return (
              <div
                style={{
                  display: "flex",
                  justifyContent: "center",
                  alignItems: "center",
                }}
              >
                <Circle className="winning-circle" />
                <p style={{ position: "absolute" }}>G</p>
              </div>
            );
          } else if (match.homeScore === match.awayScore) {
            return (
              <div
                style={{
                  display: "flex",
                  justifyContent: "center",
                  alignItems: "center",
                }}
              >
                <Circle className="tie-circle" />
                <p style={{ position: "absolute" }}>E</p>
              </div>
            );
          } else {
            return (
              <div
                style={{
                  display: "flex",
                  justifyContent: "center",
                  alignItems: "center",
                }}
              >
                <Circle className="losing-circle" />
                <p style={{ position: "absolute" }}>P</p>
              </div>
            );
          }
        })}
      </div>
      <div>
        <h4>Historial</h4>
        <div className="history-record">
          {teamMatches.data.map((match) => {
            if (
              teamSelected[0].name === match.home &&
              match.homeScore > match.awayScore
            ) {
              wins++;
            } else if (
              teamSelected[0].name === match.away &&
              match.homeScore < match.awayScore
            ) {
              wins++;
            } else if (match.awayScore === match.homeScore) {
              ties++;
            } else {
              losses++;
            }
          })}
          <p>{wins}-</p>
          <p>{ties}-</p>
          <p>{losses}</p>
        </div>
      </div>
      <div>
        <h2>Estad√≠sticas</h2>
        <div>
          <p>Partidos jugados: {teamMatches.data.length}</p>
          <p>Partidos ganados: {wins}</p>
          <p>Partidos empatados: {ties}</p>
          <p>Partidos perdidos: {losses}</p>
          <p>
            Goles anotados:{" "}
            {teamMatches.data.map((match) => {
              if (teamSelected[0].name === match.home) {
                goalsScored += match.homeScore;
              } else if (teamSelected[0].name === match.away) {
                goalsScored += match.awayScore;
              }
            })}
            {goalsScored}
          </p>
          <p>
            Goles recibidos:{" "}
            {teamMatches.data.map((match) => {
              if (teamSelected[0].name !== match.home) {
                goalsReceived += match.homeScore;
              } else if (teamSelected[0].name !== match.away) {
                goalsReceived += match.awayScore;
              }
            })}
            {goalsReceived}
          </p>
          <p>
            Promedio gol a favor por partido:{" "}
            {(goalsScored / teamMatches.data.length).toFixed(2)}
          </p>
          <p>
            Promedio gol en contra por partido:{" "}
            {(goalsReceived / teamMatches.data.length).toFixed(2)}
          </p>
          <p>
            Torneos jugados:{" "}
            {teamMatches.data.map((match) => {
              let tournamentSelected = match.tournament;
              if (tournamentSelected === tournamentSelectedB) {
              } else {
                tournamentsPlayed++;
                tournamentSelectedB = tournamentSelected;
              }
            })}
            {tournamentsPlayed}
          </p>
          <p>
            Torneos ganados:{" "}
            {finalsPlayed.length === 0
              ? (tournamentsWon = 0)
              : finalsPlayed.map((match) => {
                  if (
                    teamSelected[0].name === match.home &&
                    match.homeScore > match.awayScore
                  ) {
                    tournamentsWon++;
                  } else if (
                    teamSelected[0].name === match.away &&
                    match.homeScore < match.awayScore
                  ) {
                    tournamentsWon++;
                  } else {
                    tournamentsWon;
                  }
                  return tournamentsWon;
                })}
          </p>
          <div>
            <h2>Historiales</h2>
            <div>
              <div>
                Filtrar por: <FilterAltOutlined />
              </div>
              <div>
                <label>
                  Rival
                  <select name="rival">
                    {teamMatches.data.map((match) => {
                      let rival;
                      match.home === teamSelected[0].name
                        ? (rival = match.away)
                        : (rival = match.home);
                      return <option value={rival}>{rival}</option>;
                    })}
                  </select>
                </label>
                <label>
                  Diferencia de gol
                  <select name="goalDifference">
                    <option value="+3">+3</option>
                    <option value="+2">+2</option>
                    <option value="+3">+1</option>
                    <option value="+3">0</option>
                    <option value="+3">-1</option>
                    <option value="+3">-2</option>
                    <option value="+3">-3</option>
                  </select>
                </label>
                <label>
                  Historiales
                  <select name="history">
                    <option value="positive">Positivos</option>
                    <option value="tied">Empatados</option>
                    <option value="negative">Negativos</option>
                  </select>
                </label>
                <label>
                  Partidos
                  <select name="matches">
                    <option value="won">Ganados</option>
                    <option value="tied">Empatados</option>
                    <option value="lost">Perdidos</option>
                  </select>
                </label>
                <label>
                  Torneos/Partidos
                  <select name="category">
                    <option value="won">Amistosos</option>
                    <option value="tied">Oficiales</option>
                    <option value="lost">Ambos</option>
                  </select>
                </label>
              </div>
            </div>
            {teamMatches.data.map((match) => {
              let rival;
              match.home === teamSelected[0].name
                ? (rival = match.away)
                : (rival = match.home);
              let historyAgainstRival = teamMatches.data.filter(
                (matchEl) => matchEl.home === rival || matchEl.away === rival
              );

              return (
                <div>
                  <div
                    style={{
                      display: "flex",
                      alignItems: "center",
                      justifyContent: "space-around",
                      fontSize: "24px",
                      fontWeight: "bold",
                    }}
                  >
                    <h3>
                      {teamSelected[0].name} vs {rival}{" "}
                    </h3>
                    {resetHistoryParams()}
                    {historyAgainstRival.map((match) => {
                      if (
                        teamSelected[0].name === match.home &&
                        match.homeScore > match.awayScore
                      ) {
                        winsVsRival++;
                      } else if (
                        teamSelected[0].name === match.away &&
                        match.homeScore < match.awayScore
                      ) {
                        winsVsRival++;
                      } else if (match.awayScore === match.homeScore) {
                        tiesVsRival++;
                      } else {
                        lossesVsRival++;
                      }
                    })}
                    {winsVsRival > lossesVsRival ? (
                      <div className="winning-history">
                        <p>
                          {winsVsRival}-{tiesVsRival}-{lossesVsRival}
                        </p>
                      </div>
                    ) : lossesVsRival > winsVsRival ? (
                      <div className="losing-history">
                        <p>
                          {winsVsRival}-{tiesVsRival}-{lossesVsRival}
                        </p>
                      </div>
                    ) : (
                      <div className="tie-history">
                        <p>
                          {winsVsRival}-{tiesVsRival}-{lossesVsRival}
                        </p>
                      </div>
                    )}
                  </div>
                  <div>
                    <div key={match._id} className="match-container">
                      <div className="match-specific-tournament-info">
                        <img
                          width="26rem"
                          height="26rem"
                          src={getTournamentLogo(match.tournament)}
                        />
                        <p>{match.tournament}</p>
                      </div>
                      <div>
                        <div className="team-score">
                          <div className="team-data">
                            <img
                              alt={`Escudo ${match.home}`}
                              src={getLogo(match.home)}
                              width="30rem"
                              height="30rem"
                            />
                            <p>{match.home}</p>
                          </div>
                          {match.homeScore > match.awayScore ? (
                            <p>
                              {match.homeScore}
                              <ArrowLeft
                                style={{
                                  color: "#6568A6",
                                  position: "absolute",
                                }}
                              />
                            </p>
                          ) : (
                            <p>{match.homeScore}</p>
                          )}
                        </div>
                        <Divider className="divider" />
                        <div className="team-score">
                          <div className="team-data">
                            <img
                              alt={`Escudo ${match.away}`}
                              src={getLogo(match.away)}
                              width="30rem"
                              height="30rem"
                            />
                            <p>{match.away}</p>
                          </div>
                          {match.homeScore < match.awayScore ? (
                            <p>
                              {match.awayScore}
                              <ArrowLeft
                                style={{
                                  color: "#6568A6",
                                  position: "absolute",
                                }}
                              />
                            </p>
                          ) : (
                            <p>{match.awayScore}</p>
                          )}
                        </div>
                      </div>
                      <div className="match-video">
                        <Divider
                          orientation="vertical"
                          flexItem
                          className="divider"
                        />
                        {match.video === null ? (
                          <PlayDisabled />
                        ) : (
                          <iframe
                            width="140rem"
                            height="100rem"
                            src={
                              match.video + "&showinfo=0&controls=0&autohide=1"
                            }
                            title={`${match.home} vs ${match.away}`}
                            frameBorder="0"
                            allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
                            allowFullScreen
                          ></iframe>
                        )}
                      </div>
                    </div>
                  </div>
                </div>
              );
            })}
          </div>
        </div>
      </div>
    </>
  );
};

export default Details;
